{"version":3,"file":"social-share-buttons.js","sources":["../src/platforms.ts","../src/SocialShareButtons.ts"],"sourcesContent":["import type { Platform, ShareData } from './types';\n\nexport const platforms: Record<string, Platform> = {\n  x: {\n    name: 'x',\n    label: 'X',\n    getShareUrl: (data: ShareData) => {\n      const params = new URLSearchParams();\n      if (data.url) params.set('url', data.url);\n      if (data.text) params.set('text', data.text);\n      if (data.hashtags?.length) params.set('hashtags', data.hashtags.join(','));\n      if (data.via) params.set('via', data.via);\n      return `https://x.com/intent/tweet?${params.toString()}`; // https://developer.x.com/en/docs/x-for-websites/web-intents/overview\n    },\n    color: '#000000',\n  },\n\n  bluesky: {\n    name: 'bluesky',\n    label: 'Bluesky',\n    getShareUrl: (data: ShareData) => {\n      const text = [data.text, data.url].filter(Boolean).join('\\n\\n');\n      const params = new URLSearchParams();\n      if (text) params.set('text', text);\n      return `https://bsky.app/intent/compose?${params.toString()}`; // https://docs.bsky.app/docs/advanced-guides/intent-links\n    },\n    color: '#1185fe',\n  },\n\n  threads: {\n    name: 'threads',\n    label: 'Threads',\n    getShareUrl: (data: ShareData) => {\n      const text = [data.text, data.url].filter(Boolean).join('\\n\\n');\n      const params = new URLSearchParams();\n      if (text) params.set('text', text);\n      return `https://www.threads.net/intent/post?${params.toString()}`; // https://developers.facebook.com/docs/threads/threads-web-intents/\n    },\n    color: '#000000',\n  },\n\n  mastodon: {\n    name: 'mastodon',\n    label: 'Mastodon',\n    getShareUrl: (data: ShareData) => {\n      const text = [data.text, data.url].filter(Boolean).join('\\n\\n');\n      const params = new URLSearchParams();\n      if (text) params.set('text', text);\n      // Note: Mastodon share requires instance selection, using default share interface\n      return `https://mastodon.social/share?${params.toString()}`;\n    },\n    color: '#6364ff',\n  },\n\n  facebook: {\n    name: 'facebook',\n    label: 'Facebook',\n    getShareUrl: (data: ShareData) => {\n      const params = new URLSearchParams();\n      if (data.url) params.set('u', data.url);\n      return `https://www.facebook.com/sharer/sharer.php?${params.toString()}`;\n    },\n    color: '#0866FF',\n  },\n\n  linkedin: {\n    name: 'linkedin',\n    label: 'LinkedIn',\n    getShareUrl: (data: ShareData) => {\n      const params = new URLSearchParams();\n      if (data.url) params.set('url', data.url);\n      return `https://www.linkedin.com/sharing/share-offsite/?${params.toString()}`;\n    },\n    color: '#0077b5',\n  },\n\n  reddit: {\n    name: 'reddit',\n    label: 'Reddit',\n    getShareUrl: (data: ShareData) => {\n      const params = new URLSearchParams();\n      if (data.url) params.set('url', data.url);\n      if (data.title) params.set('title', data.title);\n      return `https://www.reddit.com/submit?${params.toString()}`;\n    },\n    color: '#ff4500',\n  },\n\n  telegram: {\n    name: 'telegram',\n    label: 'Telegram',\n    getShareUrl: (data: ShareData) => {\n      const params = new URLSearchParams();\n      if (data.url) params.set('url', data.url);\n      if (data.text) params.set('text', data.text);\n      return `https://t.me/share/url?${params.toString()}`;\n    },\n    color: '#0088cc',\n  },\n\n  whatsapp: {\n    name: 'whatsapp',\n    label: 'WhatsApp',\n    getShareUrl: (data: ShareData) => {\n      const text = [data.text, data.url].filter(Boolean).join(' ');\n      const params = new URLSearchParams();\n      if (text) params.set('text', text);\n      // Auto-detect mobile vs desktop\n      const isMobile = /Android|iPhone|iPad|iPod/i.test(navigator.userAgent);\n      const baseUrl = isMobile ? 'whatsapp://send' : 'https://web.whatsapp.com/send';\n      return `${baseUrl}?${params.toString()}`;\n    },\n    color: '#25d366',\n  },\n\n  email: {\n    name: 'email',\n    label: 'Email',\n    getShareUrl: (data: ShareData) => {\n      const subject = data.title || data.text || '';\n      const body = [data.description, data.url].filter(Boolean).join('\\n\\n');\n      const params = new URLSearchParams();\n      if (subject) params.set('subject', subject);\n      if (body) params.set('body', body);\n      return `mailto:?${params.toString()}`;\n    },\n    color: '#7f7f7f',\n  },\n\n  pinterest: {\n    name: 'pinterest',\n    label: 'Pinterest',\n    getShareUrl: (data: ShareData) => {\n      const params = new URLSearchParams();\n      if (data.url) params.set('url', data.url);\n      if (data.media) params.set('media', data.media);\n      if (data.description) params.set('description', data.description);\n      return `https://pinterest.com/pin/create/button/?${params.toString()}`;\n    },\n    color: '#bd081c',\n  },\n\n  copy: {\n    name: 'copy',\n    label: 'Copy',\n    getShareUrl: (data: ShareData) => {\n      return data.url || window.location.href;\n    },\n    color: '#6c757d',\n  },\n};\n\nexport const defaultPlatforms = ['x', 'facebook', 'whatsapp'];\n\nexport const getPlatform = (name: string): Platform | undefined => {\n  return platforms[name];\n};\n","import type {\n  SocialShareButtonsOptions,\n  SocialShareButtonsInstance,\n  ShareData,\n  PlatformName,\n} from './types';\nimport { platforms, defaultPlatforms, getPlatform } from './platforms';\n\nconst DEFAULT_OPTIONS: Required<Omit<SocialShareButtonsOptions, 'container' | 'labels' | 'customPlatforms' | 'onShare' | 'className' | 'ariaLabel'>> = {\n  platforms: defaultPlatforms as PlatformName[],\n  theme: 'light',\n  nativeShare: false,\n  popup: true,\n  popupWidth: 550,\n  popupHeight: 420,\n  copiedDuration: 2000,\n};\n\nexport class SocialShareButtons implements SocialShareButtonsInstance {\n  private options: SocialShareButtonsOptions;\n  private container: HTMLElement | null = null;\n  private widget: HTMLElement | null = null;\n  private shareData: ShareData;\n\n  constructor(options: SocialShareButtonsOptions = {}) {\n    this.options = { ...DEFAULT_OPTIONS, ...options };\n    this.shareData = this.getDefaultShareData();\n\n    // Add custom platforms if provided\n    if (this.options.customPlatforms) {\n      this.options.customPlatforms.forEach(platform => {\n        platforms[platform.name] = platform;\n      });\n    }\n\n    this.init();\n  }\n\n  private init(): void {\n    // Find or create container\n    if (this.options.container) {\n      if (typeof this.options.container === 'string') {\n        this.container = document.querySelector(this.options.container);\n      } else {\n        this.container = this.options.container;\n      }\n    } else {\n      this.container = document.body;\n    }\n\n    if (!this.container) {\n      throw new Error('SocialShareButtons: Container not found');\n    }\n\n    this.createWidget();\n    this.attachEventListeners();\n    this.updateTheme();\n  }\n\n  private getDefaultShareData(): ShareData {\n    // Try to get data from meta tags\n    const getMeta = (name: string): string | undefined => {\n      const meta = document.querySelector(`meta[property=\"${name}\"], meta[name=\"${name}\"]`);\n      return meta?.getAttribute('content') || undefined;\n    };\n\n    return {\n      url: window.location.href,\n      title: document.title,\n      description: getMeta('og:description') || getMeta('description'),\n      media: getMeta('og:image'),\n    };\n  }\n\n  private createWidget(): void {\n    const widget = document.createElement('div');\n    widget.className = `social-share ${this.options.className || ''}`;\n    widget.setAttribute('role', 'region');\n    widget.setAttribute('aria-label', this.options.ariaLabel || 'Social sharing buttons');\n    widget.setAttribute('data-theme', this.options.theme || 'auto');\n\n    const buttonContainer = document.createElement('div');\n    buttonContainer.className = 'social-share-buttons';\n\n    // Add platform buttons\n    this.options.platforms?.forEach(platformName => {\n      const platform = getPlatform(platformName);\n      if (!platform) return;\n\n      const button = this.createButton(platform.name, platform.label);\n      buttonContainer.appendChild(button);\n    });\n\n    widget.appendChild(buttonContainer);\n    this.container?.appendChild(widget);\n    this.widget = widget;\n  }\n\n  private createButton(platformName: PlatformName, label: string): HTMLElement {\n    const button = document.createElement('button');\n    button.className = 'social-share-button';\n    button.setAttribute('data-platform', platformName);\n    button.setAttribute('type', 'button');\n    button.setAttribute('aria-label', `Share on ${label}`);\n\n    const customLabel = this.options.labels?.[platformName];\n    const displayLabel = customLabel || label;\n\n    button.textContent = displayLabel;\n\n    // Set custom property for theming\n    const platform = getPlatform(platformName);\n    if (platform?.color) {\n      button.style.setProperty('--social-share-buttons-color', platform.color);\n    }\n\n    return button;\n  }\n\n  private attachEventListeners(): void {\n    this.widget?.addEventListener('click', this.handleClick.bind(this));\n\n    // Handle theme changes\n    if (this.options.theme === 'auto') {\n      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n      mediaQuery.addEventListener('change', () => this.updateTheme());\n    }\n  }\n\n  private async handleClick(event: Event): Promise<void> {\n    const target = event.target as HTMLElement;\n    const button = target.closest('[data-platform]') as HTMLElement;\n\n    if (!button) return;\n\n    event.preventDefault();\n    const platformName = button.getAttribute('data-platform') as PlatformName;\n\n    await this.share(platformName, this.shareData);\n  }\n\n  public async share(platformName: PlatformName, data?: ShareData): Promise<boolean> {\n    const shareData = { ...this.shareData, ...data };\n\n    // Try native share first if enabled and available\n    if (\n      this.options.nativeShare &&\n      platformName !== 'copy' &&\n      this.canUseNativeShare()\n    ) {\n      return this.shareNative(shareData);\n    }\n\n    // Handle copy specially\n    if (platformName === 'copy') {\n      return this.copyToClipboard(shareData.url || window.location.href);\n    }\n\n    const platform = getPlatform(platformName);\n    if (!platform) {\n      console.warn(`SocialShareButtons: Platform \"${platformName}\" not found`);\n      return false;\n    }\n\n    const shareUrl = platform.getShareUrl(shareData);\n\n    // Open share URL\n    if (this.options.popup) {\n      this.openPopup(shareUrl);\n    } else {\n      window.open(shareUrl, '_blank', 'noopener,noreferrer');\n    }\n\n    // Trigger callback\n    this.options.onShare?.(platformName, true);\n\n    return true;\n  }\n\n  private openPopup(url: string): void {\n    const width = this.options.popupWidth || 550;\n    const height = this.options.popupHeight || 420;\n    const left = (window.innerWidth - width) / 2 + window.screenX;\n    const top = (window.innerHeight - height) / 2 + window.screenY;\n\n    const features = `width=${width},height=${height},left=${left},top=${top},scrollbars=yes,resizable=yes`;\n\n    window.open(url, 'share-popup', features);\n  }\n\n  public async shareNative(data?: ShareData): Promise<boolean> {\n    if (!this.canUseNativeShare()) {\n      console.warn('SocialShareButtons: Native share API not available');\n      return false;\n    }\n\n    const shareData = { ...this.shareData, ...data };\n\n    try {\n      await navigator.share({\n        title: shareData.title,\n        text: shareData.text || shareData.description,\n        url: shareData.url,\n      });\n\n      this.options.onShare?.('native' as PlatformName, true);\n      return true;\n    } catch (error) {\n      if ((error as Error).name !== 'AbortError') {\n        console.error('SocialShareButtons: Native share failed', error);\n      }\n      return false;\n    }\n  }\n\n  private canUseNativeShare(): boolean {\n    return 'share' in navigator && navigator.canShare !== undefined;\n  }\n\n  private async copyToClipboard(text: string): Promise<boolean> {\n    try {\n      if (navigator.clipboard && window.isSecureContext) {\n        await navigator.clipboard.writeText(text);\n      } else {\n        // Fallback for older browsers\n        const textarea = document.createElement('textarea');\n        textarea.value = text;\n        textarea.style.position = 'fixed';\n        textarea.style.opacity = '0';\n        document.body.appendChild(textarea);\n        textarea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textarea);\n      }\n\n      // Visual feedback\n      const copyButton = this.widget?.querySelector('[data-platform=\"copy\"]');\n      if (copyButton) {\n        const originalContent = copyButton.innerHTML;\n        const feedbackText = this.options.labels?.copied || 'Copied!';\n        copyButton.innerHTML = feedbackText;\n        setTimeout(() => {\n          copyButton.innerHTML = originalContent;\n        }, this.options.copiedDuration || 2000);\n      }\n\n      this.options.onShare?.('copy', true);\n      return true;\n    } catch (error) {\n      console.error('SocialShareButtons: Copy to clipboard failed', error);\n      return false;\n    }\n  }\n\n  private updateTheme(): void {\n    if (!this.widget) return;\n\n    if (this.options.theme === 'auto') {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      this.widget.setAttribute('data-theme', prefersDark ? 'dark' : 'light');\n    } else {\n      this.widget.setAttribute('data-theme', this.options.theme || 'light');\n    }\n  }\n\n  public updateOptions(options: Partial<SocialShareButtonsOptions>): void {\n    this.options = { ...this.options, ...options };\n\n    // Recreate widget with new options\n    if (this.widget) {\n      this.widget.remove();\n      this.createWidget();\n      this.updateTheme();\n    }\n  }\n\n  public destroy(): void {\n    if (this.widget) {\n      this.widget.remove();\n      this.widget = null;\n    }\n  }\n}\n\nexport default SocialShareButtons;\n"],"names":["platforms","data","params","text","subject","body","defaultPlatforms","getPlatform","name","DEFAULT_OPTIONS","SocialShareButtons","options","platform","getMeta","widget","buttonContainer","platformName","button","label","displayLabel","event","shareData","shareUrl","url","width","height","left","top","features","error","textarea","copyButton","originalContent","feedbackText","prefersDark"],"mappings":"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"}